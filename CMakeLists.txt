cmake_minimum_required(VERSION 3.16)

# set(CMAKE_C_COMPILER /usr/bin/gcc) set(CMAKE_CXX_COMPILER /usr/bin/g++)

project(cpp_basic)

# Abseil requires C++14 set(CMAKE_CXX_STANDARD 14)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# set(CMAKE_BUILD_TYPE Release)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_BUILD_TYPE RelWithDebInfo)
add_compile_options(-Wall -Wextra -O2)
# add_compile_options(-Werror)
add_compile_options(-fdiagnostics-color=always)
add_compile_options(-fno-omit-frame-pointer)
add_compile_options(-fPIC)
add_compile_options(-Werror=return-type)
add_compile_options(-Wextra)
add_compile_options(-Wall)
# add_compile_options(-Wno-error=unused-parameter)

# add_definitions(-D_GLIBCXX_DEBUG)

find_package(absl REQUIRED CONFIG)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
find_package(Threads REQUIRED)

find_package(Boost)
include_directories(${Boost_INCLUDE_DIRS})

find_package(GTest REQUIRED)
include_directories(${GTest_INCLUDE_DIRS})

find_package(GFlags REQUIRED COMPONENTS static)
include_directories(${GFlags_INCLUDE_DIRS})

# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread ")

add_subdirectory(static)
add_subdirectory(use_absl)
add_subdirectory(constexpr)
add_subdirectory(impl)
add_subdirectory(test_proto)
add_subdirectory(use_eigen)
add_subdirectory(pcl)
add_subdirectory(use_boost)
add_subdirectory(smart_pointer)
add_subdirectory(mutex)
add_subdirectory(class_object)
add_subdirectory(meta_function)
add_subdirectory(c++17)
add_subdirectory(time)
add_subdirectory(pair_tuple)
add_subdirectory(data_conversion)
add_subdirectory(promise_future)
add_subdirectory(sfinae)
add_subdirectory(design_mode)
add_subdirectory(nested_class)
add_subdirectory(random)
add_subdirectory(keyword)
add_subdirectory(use_vector)
add_subdirectory(game)
add_subdirectory(thread)
add_subdirectory(array)
add_subdirectory(number)
add_subdirectory(type)
add_subdirectory(memory_error)
add_subdirectory(linux_c)
add_subdirectory(macro)
add_subdirectory(memory_order)
add_subdirectory(algo)
add_subdirectory(numeric)
add_subdirectory(lambda)
add_subdirectory(reference)
add_subdirectory(database_demo)
add_subdirectory(digital_digest)
add_subdirectory(use_queue)
add_subdirectory(filesystem_demo)
add_subdirectory(lock_demo)
add_subdirectory(use_string)

add_executable(compare_version compare_version.cc)

# Declare dependency on the absl::strings library
target_link_libraries(compare_version absl::strings)

add_executable(return-type return-type.cc)

# add_definitions(-DCPU=aarch64)
add_executable(macro_define macro_define.cc)

add_executable(good_bad_worker good_bad_worker.cc)
target_link_libraries(good_bad_worker Threads::Threads)

add_executable(side_process side_process.cc)
target_link_libraries(side_process Threads::Threads)

add_executable(use_span use_span.cc)
target_link_libraries(use_span absl::span glog gflags absl::strings)

add_executable(crash crash.cc)
target_link_libraries(crash absl::span glog gflags absl::strings)
# target_compile_options(crash PRIVATE -g)

add_executable(use_atomic use_atomic.cc)
target_link_libraries(use_atomic Threads::Threads glog)

add_executable(use_chrono use_chrono.cc)
target_link_libraries(use_chrono Threads::Threads glog gflags absl::time)

add_executable(likely likely.c)
add_executable(for_erase for_erase.cc)
add_executable(sort_line sort_line.cc)
add_executable(span_basic span_basic.cc)
target_link_libraries(span_basic absl::span)
add_executable(sort_bug sort_bug.cc)
add_executable(class_const_member class_const_member.cc)
add_executable(vector_at vector_at.cc)
add_executable(return_reference return_reference.cc)
add_executable(set_contain set_contain.cc)
add_executable(const_pointer const_pointer.cc)
add_executable(custom_sort custom_sort.cc)
add_executable(async async.cc)
target_link_libraries(async Threads::Threads)
add_executable(check_nan check_nan.cc)
add_executable(float_min float_min.cc)
add_executable(static_variable static_variable.cc)
add_executable(negtive_residu negtive_residu.cc)
add_executable(const_mutable const_mutable.cc)
add_executable(push_read push_read.cc)
add_executable(pairs_of_numbers pairs_of_numbers.cc)
add_executable(use_after_move use_after_move.cc)
add_executable(multi_thread multi_thread.cc)
target_link_libraries(multi_thread Threads::Threads)
add_executable(str_replace str_replace.cc)

add_executable(ends_with ends_with.cc)
add_executable(pointer_vector pointer_vector.cc)
add_executable(use_log use_log.cc)
target_link_libraries(use_log Threads::Threads glog gflags gflags)

add_executable(too_many_product_operation too_many_product_operation.cc)
target_link_libraries(too_many_product_operation Threads::Threads glog)
target_compile_options(too_many_product_operation PRIVATE -O2 -g)

add_compile_options(-DTEST_MACRO)
add_executable(cout_macro cout_macro.cc)
add_executable(vector_push_bench vector_push_bench.cc)

add_executable(call_stack call_stack.cc)
add_executable(sizeof sizeof.cc)
add_executable(program_exit program_exit.cc)
