#include <iostream>
#include <random>

class RandomSample {
 public:
  RandomSample(int seed, float sample_rate)
      : generator_(std::mt19937(seed)),
        distribtor_(std::uniform_int_distribution<>(0, kMaxBound)),
        sample_rate_(sample_rate) {}

  bool sample() {
    static int min_bound = sample_rate_ * kMaxBound;
    int random_value = distribtor_(generator_);
    return random_value < min_bound;
  }

 private:
  std::mt19937 generator_;
  std::uniform_int_distribution<> distribtor_;
  float sample_rate_;

  enum ConstVariable {
    kMaxBound = 9999999,
  };
};

void test_uniform_dist() {
  RandomSample rand_sample(12345, 0.5);
  int count = 0;
  constexpr int max_try = 100000000;
  for (int i = 0; i < max_try; ++i) {
    auto should_lost = rand_sample.sample();
    // std::cout << "lost? " << should_lost << std::endl;
    count += (int)should_lost;
  }
  std::cout << "count: " << count << " lost ratio: " << (double)count / max_try
            << std::endl;
}

int cpp_reference_demo() {
  std::random_device rd;  // a seed source for the random number engine
  std::mt19937 gen(999);  // mersenne_twister_engine seeded with rd()
  std::uniform_int_distribution<> distrib(0, 9999);

  // Use distrib to transform the random unsigned int
  // generated by gen into an int in [1, 6]
  for (int n = 0; n != 10; ++n) std::cout << distrib(gen) << ' ';
  std::cout << '\n';
  return 0;
}

int main() { test_uniform_dist(); }
